/* -------------------------------------------------------------------

                   âš¡ Storm Software - Powerlines

 This code was released as part of the Powerlines project. Powerlines
 is maintained by Storm Software under the Apache-2.0 license, and is
 free for commercial and private use. For more information, please visit
 our licensing page at https://stormsoftware.com/licenses/projects/powerlines.

 Website:                  https://stormsoftware.com
 Repository:               https://github.com/storm-software/powerlines
 Documentation:            https://docs.stormsoftware.com/projects/powerlines
 Contact:                  https://stormsoftware.com/contact

 SPDX-License-Identifier:  Apache-2.0

 ------------------------------------------------------------------- */

import type { CapnpcOptions } from "@stryke/capnp/types";
import { UserConfig } from "powerlines/types/config";
import { PluginContext } from "powerlines/types/context";
import { ResolvedConfig } from "powerlines/types/resolved";

export type CapnpPluginOptions = Partial<
  Omit<CapnpcOptions, "workspaceRoot" | "projectRoot" | "schemas">
> & {
  /**
   * The path to the Cap'n Proto schema file(s).
   *
   * @defaultValue "\{projectRoot\}/schemas/*.capnp"
   */
  schema?: string | URL;

  /**
   * The path to the output file generated by the plugin.
   *
   * @remarks
   * If using the default value, the file can be imported from "powerlines:capnp/schema-name". This field allows the use of the "\{builtinPath\}" token to refer to the built-in Powerlines plugins directory - the value will be replaced with the correct file path by the plugin.
   *
   * @defaultValue "\{builtinPath\}/capnp"
   */
  generatedPath?: string;
};

export type CapnpPluginUserConfig = UserConfig & {
  capnp?: Omit<CapnpPluginOptions, "schema" | "generatedPath"> &
    Required<Pick<CapnpPluginOptions, "schema" | "generatedPath">>;
};

export type CapnpPluginResolvedConfig = ResolvedConfig & {
  capnp: Omit<CapnpPluginOptions, "schema" | "generatedPath"> &
    Required<Pick<CapnpPluginOptions, "schema" | "generatedPath">>;
};

export type CapnpPluginContext<
  TResolvedConfig extends CapnpPluginResolvedConfig = CapnpPluginResolvedConfig
> = PluginContext<TResolvedConfig>;
