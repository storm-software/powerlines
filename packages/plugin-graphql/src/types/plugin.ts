/* -------------------------------------------------------------------

                   âš¡ Storm Software - Powerlines

 This code was released as part of the Powerlines project. Powerlines
 is maintained by Storm Software under the Apache-2.0 license, and is
 free for commercial and private use. For more information, please visit
 our licensing page at https://stormsoftware.com/licenses/projects/powerlines.

 Website:                  https://stormsoftware.com
 Repository:               https://github.com/storm-software/powerlines
 Documentation:            https://docs.stormsoftware.com/projects/powerlines
 Contact:                  https://stormsoftware.com/contact

 SPDX-License-Identifier:  Apache-2.0

 ------------------------------------------------------------------- */

import { CodegenContext, YamlCliFlags } from "@graphql-codegen/cli";
import { UserConfig } from "powerlines/types/config";
import { PluginContext } from "powerlines/types/context";
import { ResolvedConfig } from "powerlines/types/resolved";

export type GraphQLPluginOptions = Partial<
  Omit<YamlCliFlags, "config" | "watch">
> & {
  /**
   * The path to a custom GraphQL Codegen configuration file.
   *
   * @remarks
   * If not provided, the plugin will attempt to locate a configuration file by searching for one of the following filenames in the project root (in order): "codegen.yml", "codegen.yaml", "codegen.json", "codegen.js", "codegen.cjs".
   */
  configFile?: string;

  /**
   * The path to the output file generated by the plugin.
   *
   * @remarks
   * If using the default value, the file can be imported from "powerlines:graphql/schema-name". This field allows the use of the "\{builtinPath\}" token to refer to the built-in Powerlines plugins directory - the value will be replaced with the correct file path by the plugin.
   *
   * @defaultValue "\{builtinPath\}/graphql"
   */
  generatedPath?: string;
};

export type GraphQLPluginUserConfig = UserConfig & {
  graphql?: Omit<
    YamlCliFlags,
    "config" | "watch" | "project" | "overwrite" | "require"
  > &
    Omit<GraphQLPluginOptions, "generatedPath" | "configFile"> &
    Required<Pick<GraphQLPluginOptions, "generatedPath" | "configFile">>;
};

export type GraphQLPluginResolvedConfig = ResolvedConfig & {
  graphql: Omit<
    YamlCliFlags,
    "config" | "watch" | "project" | "overwrite" | "require"
  > &
    Omit<GraphQLPluginOptions, "generatedPath" | "configFile"> &
    Required<Pick<GraphQLPluginOptions, "generatedPath" | "configFile">>;
};

export type GraphQLPluginContext<
  TResolvedConfig extends
    GraphQLPluginResolvedConfig = GraphQLPluginResolvedConfig
> = PluginContext<TResolvedConfig> & {
  graphql: {
    codegen: CodegenContext;
  };
};
