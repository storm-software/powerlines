/* -------------------------------------------------------------------

                   âš¡ Storm Software - Powerlines

 This code was released as part of the Powerlines project. Powerlines
 is maintained by Storm Software under the Apache-2.0 license, and is
 free for commercial and private use. For more information, please visit
 our licensing page at https://stormsoftware.com/licenses/projects/powerlines.

 Website:                  https://stormsoftware.com
 Repository:               https://github.com/storm-software/powerlines
 Documentation:            https://docs.stormsoftware.com/projects/powerlines
 Contact:                  https://stormsoftware.com/contact

 SPDX-License-Identifier:  Apache-2.0

 ------------------------------------------------------------------- */

import { Buffer } from "node:buffer";
import { Stream } from "node:stream";
import { OpenAPI3, OpenAPITSOptions } from "openapi-typescript";
import { UserConfig } from "powerlines/types/config";
import { PluginContext } from "powerlines/types/context";
import { ResolvedConfig } from "powerlines/types/resolved";

export type OpenAPIPluginOptions = Omit<OpenAPITSOptions, "cwd"> & {
  /**
   * The path to the OpenAPI schema file.
   *
   * @remarks
   * This can be a string path, URL, OpenAPI3 object, Buffer, or Readable stream.
   *
   * @defaultValue "\{projectRoot\}/schema.yaml"
   */
  schema?: string | URL | OpenAPI3 | Buffer | Stream.Readable;

  /**
   * The path to the output file generated by the plugin.
   *
   *    @remarks
   * If using the default value, the file can be imported from "powerlines:openapi". This field allows the use of the "\{builtinPath\}" token to refer to the built-in Powerlines plugins directory - the value will be replaced with the correct file path by the plugin.
   *
   * @defaultValue "\{builtinPath\}/openapi.ts"
   */
  outputFile?: string;
};

export type OpenAPIPluginUserConfig = UserConfig & {
  openapi?: Omit<OpenAPIPluginOptions, "schema"> &
    Required<Pick<OpenAPIPluginOptions, "schema">> &
    Pick<OpenAPITSOptions, "cwd">;
};

export type OpenAPIPluginResolvedConfig = ResolvedConfig & {
  openapi: Omit<OpenAPIPluginOptions, "schema"> &
    Required<Pick<OpenAPIPluginOptions, "schema">> &
    Pick<OpenAPITSOptions, "cwd">;
};

export type OpenAPIPluginContext<
  TResolvedConfig extends
    OpenAPIPluginResolvedConfig = OpenAPIPluginResolvedConfig
> = PluginContext<TResolvedConfig>;
