import * as $ from '@stryke/capnp';

declare const _capnpFileId: bigint;
declare const ReflectionKind: {
    readonly NEVER: 0;
    readonly ANY: 1;
    readonly UNKNOWN: 2;
    readonly VOID: 3;
    readonly OBJECT: 4;
    readonly STRING: 5;
    readonly NUMBER: 6;
    readonly BOOLEAN: 7;
    readonly SYMBOL: 8;
    readonly BIGINT: 9;
    readonly NULL: 10;
    readonly UNDEFINED: 11;
    readonly REGEXP: 12;
    readonly LITERAL: 13;
    readonly TEMPLATE_LITERAL: 14;
    readonly PROPERTY: 15;
    readonly METHOD: 16;
    readonly FUNCTION: 17;
    readonly PARAMETER: 18;
    readonly PROMISE: 19;
    readonly CLASS: 20;
    readonly TYPE_PARAMETER: 21;
    readonly ENUM: 22;
    readonly UNION: 23;
    readonly INTERSECTION: 24;
    readonly ARRAY: 25;
    readonly TUPLE: 26;
    readonly TUPLE_MEMBER: 27;
    readonly ENUM_MEMBER: 28;
    readonly REST: 29;
    readonly OBJECT_LITERAL: 30;
    readonly INDEX_SIGNATURE: 31;
    readonly PROPERTY_SIGNATURE: 32;
    readonly METHOD_SIGNATURE: 33;
    readonly INFER: 34;
    readonly CALL_SIGNATURE: 35;
};
type ReflectionKind = (typeof ReflectionKind)[keyof typeof ReflectionKind];
declare const ReflectionVisibility: {
    readonly PUBLIC: 0;
    readonly PROTECTED: 1;
    readonly PRIVATE: 2;
};
type ReflectionVisibility = (typeof ReflectionVisibility)[keyof typeof ReflectionVisibility];
declare class TagsReflection extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    _adoptAlias(value: $.Orphan<$.List<string>>): void;
    _disownAlias(): $.Orphan<$.List<string>>;
    get alias(): $.List<string>;
    _hasAlias(): boolean;
    _initAlias(length: number): $.List<string>;
    set alias(value: $.List<string>);
    get title(): string;
    set title(value: string);
    get hidden(): boolean;
    set hidden(value: boolean);
    get readonly(): boolean;
    set readonly(value: boolean);
    get ignore(): boolean;
    set ignore(value: boolean);
    get internal(): boolean;
    set internal(value: boolean);
    _adoptPermission(value: $.Orphan<$.List<string>>): void;
    _disownPermission(): $.Orphan<$.List<string>>;
    get permission(): $.List<string>;
    _hasPermission(): boolean;
    _initPermission(length: number): $.List<string>;
    set permission(value: $.List<string>);
    get domain(): string;
    set domain(value: string);
    toString(): string;
}
declare const DefaultValueReflection_Value_Which: {
    readonly UNDEFINED: 0;
    readonly BOOLEAN: 1;
    readonly INTEGER: 2;
    readonly FLOAT: 3;
    readonly STRING: 4;
};
type DefaultValueReflection_Value_Which = (typeof DefaultValueReflection_Value_Which)[keyof typeof DefaultValueReflection_Value_Which];
declare class DefaultValueReflection_Value extends $.Struct {
    static readonly UNDEFINED: 0;
    static readonly BOOLEAN: 1;
    static readonly INTEGER: 2;
    static readonly FLOAT: 3;
    static readonly STRING: 4;
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    get _isUndefined(): boolean;
    set undefined(_: true);
    get boolean(): boolean;
    get _isBoolean(): boolean;
    set boolean(value: boolean);
    get integer(): number;
    get _isInteger(): boolean;
    set integer(value: number);
    get float(): number;
    get _isFloat(): boolean;
    set float(value: number);
    get string(): string;
    get _isString(): boolean;
    set string(value: string);
    toString(): string;
    which(): DefaultValueReflection_Value_Which;
}
declare class DefaultValueReflection extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    get value(): DefaultValueReflection_Value;
    _initValue(): DefaultValueReflection_Value;
    toString(): string;
}
declare class SerializedTypeReference extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    get id(): number;
    set id(value: number);
    toString(): string;
}
declare class IndexAccessOrigin extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    _adoptContainer(value: $.Orphan<SerializedTypeReference>): void;
    _disownContainer(): $.Orphan<SerializedTypeReference>;
    get container(): SerializedTypeReference;
    _hasContainer(): boolean;
    _initContainer(): SerializedTypeReference;
    set container(value: SerializedTypeReference);
    _adoptIndex(value: $.Orphan<SerializedTypeReference>): void;
    _disownIndex(): $.Orphan<SerializedTypeReference>;
    get index(): SerializedTypeReference;
    _hasIndex(): boolean;
    _initIndex(): SerializedTypeReference;
    set index(value: SerializedTypeReference);
    toString(): string;
}
declare class EntityOptions_EntityIndexOptions extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    _adoptNames(value: $.Orphan<$.List<string>>): void;
    _disownNames(): $.Orphan<$.List<string>>;
    get names(): $.List<string>;
    _hasNames(): boolean;
    _initNames(length: number): $.List<string>;
    set names(value: $.List<string>);
    /**
  * JSON stringified options
  *
  */
    get options(): string;
    set options(value: string);
    toString(): string;
}
declare class EntityOptions extends $.Struct {
    static readonly EntityIndexOptions: typeof EntityOptions_EntityIndexOptions;
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _Indexes: $.ListCtor<EntityOptions_EntityIndexOptions>;
    get name(): string;
    set name(value: string);
    get description(): string;
    set description(value: string);
    get collection(): string;
    set collection(value: string);
    get database(): string;
    set database(value: string);
    get singleTableInheritance(): boolean;
    set singleTableInheritance(value: boolean);
    _adoptIndexes(value: $.Orphan<$.List<EntityOptions_EntityIndexOptions>>): void;
    _disownIndexes(): $.Orphan<$.List<EntityOptions_EntityIndexOptions>>;
    get indexes(): $.List<EntityOptions_EntityIndexOptions>;
    _hasIndexes(): boolean;
    _initIndexes(length: number): $.List<EntityOptions_EntityIndexOptions>;
    set indexes(value: $.List<EntityOptions_EntityIndexOptions>);
    toString(): string;
}
declare class SerializedTypeObjectLiteral extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    static _Types: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    _adoptTypes(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypes(): $.Orphan<$.List<SerializedTypeReference>>;
    get types(): $.List<SerializedTypeReference>;
    _hasTypes(): boolean;
    _initTypes(length: number): $.List<SerializedTypeReference>;
    set types(value: $.List<SerializedTypeReference>);
    _adoptTags(value: $.Orphan<TagsReflection>): void;
    _disownTags(): $.Orphan<TagsReflection>;
    get tags(): TagsReflection;
    _hasTags(): boolean;
    _initTags(): TagsReflection;
    set tags(value: TagsReflection);
    toString(): string;
}
declare class SerializedTypeClassType extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    static _ExtendsArguments: $.ListCtor<SerializedTypeReference>;
    static _Arguments: $.ListCtor<SerializedTypeReference>;
    static _Types: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    get name(): string;
    set name(value: string);
    get globalObject(): boolean;
    set globalObject(value: boolean);
    get classType(): string;
    set classType(value: string);
    _adoptExtendsArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownExtendsArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get extendsArguments(): $.List<SerializedTypeReference>;
    _hasExtendsArguments(): boolean;
    _initExtendsArguments(length: number): $.List<SerializedTypeReference>;
    set extendsArguments(value: $.List<SerializedTypeReference>);
    _adoptArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get arguments(): $.List<SerializedTypeReference>;
    _hasArguments(): boolean;
    _initArguments(length: number): $.List<SerializedTypeReference>;
    set arguments(value: $.List<SerializedTypeReference>);
    _adoptSuperClass(value: $.Orphan<SerializedTypeReference>): void;
    _disownSuperClass(): $.Orphan<SerializedTypeReference>;
    get superClass(): SerializedTypeReference;
    _hasSuperClass(): boolean;
    _initSuperClass(): SerializedTypeReference;
    set superClass(value: SerializedTypeReference);
    _adoptTypes(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypes(): $.Orphan<$.List<SerializedTypeReference>>;
    get types(): $.List<SerializedTypeReference>;
    _hasTypes(): boolean;
    _initTypes(length: number): $.List<SerializedTypeReference>;
    set types(value: $.List<SerializedTypeReference>);
    _adoptTags(value: $.Orphan<TagsReflection>): void;
    _disownTags(): $.Orphan<TagsReflection>;
    get tags(): TagsReflection;
    _hasTags(): boolean;
    _initTags(): TagsReflection;
    set tags(value: TagsReflection);
    toString(): string;
}
declare class SerializedTypeParameter extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    get name(): string;
    set name(value: string);
    _adoptType(value: $.Orphan<SerializedTypeReference>): void;
    _disownType(): $.Orphan<SerializedTypeReference>;
    get type(): SerializedTypeReference;
    _hasType(): boolean;
    _initType(): SerializedTypeReference;
    set type(value: SerializedTypeReference);
    get visibility(): ReflectionVisibility;
    set visibility(value: ReflectionVisibility);
    get readonly(): boolean;
    set readonly(value: boolean);
    get optional(): boolean;
    set optional(value: boolean);
    _adoptDefault(value: $.Orphan<DefaultValueReflection>): void;
    _disownDefault(): $.Orphan<DefaultValueReflection>;
    get default(): DefaultValueReflection;
    _hasDefault(): boolean;
    _initDefault(): DefaultValueReflection;
    set default(value: DefaultValueReflection);
    _adoptTags(value: $.Orphan<TagsReflection>): void;
    _disownTags(): $.Orphan<TagsReflection>;
    get tags(): TagsReflection;
    _hasTags(): boolean;
    _initTags(): TagsReflection;
    set tags(value: TagsReflection);
    toString(): string;
}
declare class SerializedTypeMethod extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    static _Parameters: $.ListCtor<SerializedTypeParameter>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get visibility(): ReflectionVisibility;
    set visibility(value: ReflectionVisibility);
    get abstract(): boolean;
    set abstract(value: boolean);
    get optional(): boolean;
    set optional(value: boolean);
    get readonly(): boolean;
    set readonly(value: boolean);
    _adoptTags(value: $.Orphan<TagsReflection>): void;
    _disownTags(): $.Orphan<TagsReflection>;
    get tags(): TagsReflection;
    _hasTags(): boolean;
    _initTags(): TagsReflection;
    set tags(value: TagsReflection);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    get name(): string;
    set name(value: string);
    _adoptParameters(value: $.Orphan<$.List<SerializedTypeParameter>>): void;
    _disownParameters(): $.Orphan<$.List<SerializedTypeParameter>>;
    get parameters(): $.List<SerializedTypeParameter>;
    _hasParameters(): boolean;
    _initParameters(length: number): $.List<SerializedTypeParameter>;
    set parameters(value: $.List<SerializedTypeParameter>);
    _adoptReturn(value: $.Orphan<SerializedTypeReference>): void;
    _disownReturn(): $.Orphan<SerializedTypeReference>;
    get return(): SerializedTypeReference;
    _hasReturn(): boolean;
    _initReturn(): SerializedTypeReference;
    set return(value: SerializedTypeReference);
    toString(): string;
}
declare class SerializedTypeProperty extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get visibility(): ReflectionVisibility;
    set visibility(value: ReflectionVisibility);
    get abstract(): boolean;
    set abstract(value: boolean);
    get optional(): boolean;
    set optional(value: boolean);
    get readonly(): boolean;
    set readonly(value: boolean);
    _adoptTags(value: $.Orphan<TagsReflection>): void;
    _disownTags(): $.Orphan<TagsReflection>;
    get tags(): TagsReflection;
    _hasTags(): boolean;
    _initTags(): TagsReflection;
    set tags(value: TagsReflection);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    get name(): string;
    set name(value: string);
    get description(): string;
    set description(value: string);
    _adoptType(value: $.Orphan<SerializedTypeReference>): void;
    _disownType(): $.Orphan<SerializedTypeReference>;
    get type(): SerializedTypeReference;
    _hasType(): boolean;
    _initType(): SerializedTypeReference;
    set type(value: SerializedTypeReference);
    _adoptDefault(value: $.Orphan<DefaultValueReflection>): void;
    _disownDefault(): $.Orphan<DefaultValueReflection>;
    get default(): DefaultValueReflection;
    _hasDefault(): boolean;
    _initDefault(): DefaultValueReflection;
    set default(value: DefaultValueReflection);
    toString(): string;
}
declare class SerializedTypeFunction extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    static _Parameters: $.ListCtor<SerializedTypeParameter>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get visibility(): ReflectionVisibility;
    set visibility(value: ReflectionVisibility);
    get abstract(): boolean;
    set abstract(value: boolean);
    get optional(): boolean;
    set optional(value: boolean);
    get readonly(): boolean;
    set readonly(value: boolean);
    _adoptTags(value: $.Orphan<TagsReflection>): void;
    _disownTags(): $.Orphan<TagsReflection>;
    get tags(): TagsReflection;
    _hasTags(): boolean;
    _initTags(): TagsReflection;
    set tags(value: TagsReflection);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    get name(): string;
    set name(value: string);
    _adoptParameters(value: $.Orphan<$.List<SerializedTypeParameter>>): void;
    _disownParameters(): $.Orphan<$.List<SerializedTypeParameter>>;
    get parameters(): $.List<SerializedTypeParameter>;
    _hasParameters(): boolean;
    _initParameters(length: number): $.List<SerializedTypeParameter>;
    set parameters(value: $.List<SerializedTypeParameter>);
    _adoptReturn(value: $.Orphan<SerializedTypeReference>): void;
    _disownReturn(): $.Orphan<SerializedTypeReference>;
    get return(): SerializedTypeReference;
    _hasReturn(): boolean;
    _initReturn(): SerializedTypeReference;
    set return(value: SerializedTypeReference);
    toString(): string;
}
declare class SerializedTypePromise extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get visibility(): ReflectionVisibility;
    set visibility(value: ReflectionVisibility);
    get abstract(): boolean;
    set abstract(value: boolean);
    toString(): string;
}
declare class SerializedTypeEnumEntry extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    get name(): string;
    set name(value: string);
    get value(): string;
    set value(value: string);
    toString(): string;
}
declare class SerializedTypeEnum extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    static _EnumEntries: $.ListCtor<SerializedTypeEnumEntry>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    _adoptEnumEntries(value: $.Orphan<$.List<SerializedTypeEnumEntry>>): void;
    _disownEnumEntries(): $.Orphan<$.List<SerializedTypeEnumEntry>>;
    get enumEntries(): $.List<SerializedTypeEnumEntry>;
    _hasEnumEntries(): boolean;
    _initEnumEntries(length: number): $.List<SerializedTypeEnumEntry>;
    set enumEntries(value: $.List<SerializedTypeEnumEntry>);
    _adoptValues(value: $.Orphan<$.List<string>>): void;
    _disownValues(): $.Orphan<$.List<string>>;
    get values(): $.List<string>;
    _hasValues(): boolean;
    _initValues(length: number): $.List<string>;
    set values(value: $.List<string>);
    _adoptIndexType(value: $.Orphan<SerializedTypeReference>): void;
    _disownIndexType(): $.Orphan<SerializedTypeReference>;
    get indexType(): SerializedTypeReference;
    _hasIndexType(): boolean;
    _initIndexType(): SerializedTypeReference;
    set indexType(value: SerializedTypeReference);
    _adoptTags(value: $.Orphan<TagsReflection>): void;
    _disownTags(): $.Orphan<TagsReflection>;
    get tags(): TagsReflection;
    _hasTags(): boolean;
    _initTags(): TagsReflection;
    set tags(value: TagsReflection);
    toString(): string;
}
declare class SerializedTypeUnion extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    static _Types: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    _adoptTypes(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypes(): $.Orphan<$.List<SerializedTypeReference>>;
    get types(): $.List<SerializedTypeReference>;
    _hasTypes(): boolean;
    _initTypes(length: number): $.List<SerializedTypeReference>;
    set types(value: $.List<SerializedTypeReference>);
    toString(): string;
}
declare class SerializedTypeIntersection extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    static _Types: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    _adoptTypes(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypes(): $.Orphan<$.List<SerializedTypeReference>>;
    get types(): $.List<SerializedTypeReference>;
    _hasTypes(): boolean;
    _initTypes(length: number): $.List<SerializedTypeReference>;
    set types(value: $.List<SerializedTypeReference>);
    toString(): string;
}
declare class SerializedTypeArray extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    _adoptType(value: $.Orphan<SerializedTypeReference>): void;
    _disownType(): $.Orphan<SerializedTypeReference>;
    get type(): SerializedTypeReference;
    _hasType(): boolean;
    _initType(): SerializedTypeReference;
    set type(value: SerializedTypeReference);
    _adoptTags(value: $.Orphan<TagsReflection>): void;
    _disownTags(): $.Orphan<TagsReflection>;
    get tags(): TagsReflection;
    _hasTags(): boolean;
    _initTags(): TagsReflection;
    set tags(value: TagsReflection);
    toString(): string;
}
declare class SerializedTypeIndexSignature extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    _adoptIndex(value: $.Orphan<SerializedTypeReference>): void;
    _disownIndex(): $.Orphan<SerializedTypeReference>;
    get index(): SerializedTypeReference;
    _hasIndex(): boolean;
    _initIndex(): SerializedTypeReference;
    set index(value: SerializedTypeReference);
    _adoptType(value: $.Orphan<SerializedTypeReference>): void;
    _disownType(): $.Orphan<SerializedTypeReference>;
    get type(): SerializedTypeReference;
    _hasType(): boolean;
    _initType(): SerializedTypeReference;
    set type(value: SerializedTypeReference);
    toString(): string;
}
declare class SerializedTypePropertySignature extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    get name(): string;
    set name(value: string);
    get optional(): boolean;
    set optional(value: boolean);
    get readonly(): boolean;
    set readonly(value: boolean);
    get description(): string;
    set description(value: string);
    _adoptDefault(value: $.Orphan<DefaultValueReflection>): void;
    _disownDefault(): $.Orphan<DefaultValueReflection>;
    get default(): DefaultValueReflection;
    _hasDefault(): boolean;
    _initDefault(): DefaultValueReflection;
    set default(value: DefaultValueReflection);
    _adoptType(value: $.Orphan<SerializedTypeReference>): void;
    _disownType(): $.Orphan<SerializedTypeReference>;
    get type(): SerializedTypeReference;
    _hasType(): boolean;
    _initType(): SerializedTypeReference;
    set type(value: SerializedTypeReference);
    _adoptTags(value: $.Orphan<TagsReflection>): void;
    _disownTags(): $.Orphan<TagsReflection>;
    get tags(): TagsReflection;
    _hasTags(): boolean;
    _initTags(): TagsReflection;
    set tags(value: TagsReflection);
    toString(): string;
}
declare class SerializedTypeMethodSignature extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    static _Parameters: $.ListCtor<SerializedTypeParameter>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    get name(): string;
    set name(value: string);
    get optional(): boolean;
    set optional(value: boolean);
    _adoptParameters(value: $.Orphan<$.List<SerializedTypeParameter>>): void;
    _disownParameters(): $.Orphan<$.List<SerializedTypeParameter>>;
    get parameters(): $.List<SerializedTypeParameter>;
    _hasParameters(): boolean;
    _initParameters(length: number): $.List<SerializedTypeParameter>;
    set parameters(value: $.List<SerializedTypeParameter>);
    _adoptReturn(value: $.Orphan<SerializedTypeReference>): void;
    _disownReturn(): $.Orphan<SerializedTypeReference>;
    get return(): SerializedTypeReference;
    _hasReturn(): boolean;
    _initReturn(): SerializedTypeReference;
    set return(value: SerializedTypeReference);
    _adoptTags(value: $.Orphan<TagsReflection>): void;
    _disownTags(): $.Orphan<TagsReflection>;
    get tags(): TagsReflection;
    _hasTags(): boolean;
    _initTags(): TagsReflection;
    set tags(value: TagsReflection);
    toString(): string;
}
declare class SerializedTypeTypeParameter extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    get name(): string;
    set name(value: string);
    toString(): string;
}
declare class SerializedTypeInfer extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    toString(): string;
}
declare class SerializedTypeTupleMember extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    _adoptType(value: $.Orphan<SerializedTypeReference>): void;
    _disownType(): $.Orphan<SerializedTypeReference>;
    get type(): SerializedTypeReference;
    _hasType(): boolean;
    _initType(): SerializedTypeReference;
    set type(value: SerializedTypeReference);
    get optional(): boolean;
    set optional(value: boolean);
    get name(): string;
    set name(value: string);
    toString(): string;
}
declare class SerializedTypeTuple extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    static _Types: $.ListCtor<SerializedTypeTupleMember>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    _adoptTypes(value: $.Orphan<$.List<SerializedTypeTupleMember>>): void;
    _disownTypes(): $.Orphan<$.List<SerializedTypeTupleMember>>;
    get types(): $.List<SerializedTypeTupleMember>;
    _hasTypes(): boolean;
    _initTypes(length: number): $.List<SerializedTypeTupleMember>;
    set types(value: $.List<SerializedTypeTupleMember>);
    toString(): string;
}
declare class SerializedTypeRest extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    _adoptType(value: $.Orphan<SerializedTypeReference>): void;
    _disownType(): $.Orphan<SerializedTypeReference>;
    get type(): SerializedTypeReference;
    _hasType(): boolean;
    _initType(): SerializedTypeReference;
    set type(value: SerializedTypeReference);
    toString(): string;
}
declare class SimpleSerializedType extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    _adoptOrigin(value: $.Orphan<SerializedTypeReference>): void;
    _disownOrigin(): $.Orphan<SerializedTypeReference>;
    get origin(): SerializedTypeReference;
    _hasOrigin(): boolean;
    _initOrigin(): SerializedTypeReference;
    set origin(value: SerializedTypeReference);
    toString(): string;
}
declare class SerializedTypeLiteralSymbol extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    /**
  * "symbol"
  *
  */
    get type(): string;
    set type(value: string);
    get name(): string;
    set name(value: string);
    toString(): string;
}
declare class SerializedTypeLiteralBigInt extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    /**
  * "bigint"
  *
  */
    get type(): string;
    set type(value: string);
    get value(): string;
    set value(value: string);
    toString(): string;
}
declare class SerializedTypeLiteralRegex extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    /**
  * "regex"
  *
  */
    get type(): string;
    set type(value: string);
    get regex(): string;
    set regex(value: string);
    toString(): string;
}
declare const SerializedTypeLiteral_Literal_Which: {
    readonly SYMBOL: 0;
    readonly STRING: 1;
    readonly NUMBER: 2;
    readonly BOOLEAN: 3;
    readonly BIGINT: 4;
    readonly REGEX: 5;
};
type SerializedTypeLiteral_Literal_Which = (typeof SerializedTypeLiteral_Literal_Which)[keyof typeof SerializedTypeLiteral_Literal_Which];
declare class SerializedTypeLiteral_Literal extends $.Struct {
    static readonly SYMBOL: 0;
    static readonly STRING: 1;
    static readonly NUMBER: 2;
    static readonly BOOLEAN: 3;
    static readonly BIGINT: 4;
    static readonly REGEX: 5;
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    _adoptSymbol(value: $.Orphan<SerializedTypeLiteralSymbol>): void;
    _disownSymbol(): $.Orphan<SerializedTypeLiteralSymbol>;
    get symbol(): SerializedTypeLiteralSymbol;
    _hasSymbol(): boolean;
    _initSymbol(): SerializedTypeLiteralSymbol;
    get _isSymbol(): boolean;
    set symbol(value: SerializedTypeLiteralSymbol);
    get string(): string;
    get _isString(): boolean;
    set string(value: string);
    get number(): number;
    get _isNumber(): boolean;
    set number(value: number);
    get boolean(): boolean;
    get _isBoolean(): boolean;
    set boolean(value: boolean);
    _adoptBigint(value: $.Orphan<SerializedTypeLiteralBigInt>): void;
    _disownBigint(): $.Orphan<SerializedTypeLiteralBigInt>;
    get bigint(): SerializedTypeLiteralBigInt;
    _hasBigint(): boolean;
    _initBigint(): SerializedTypeLiteralBigInt;
    get _isBigint(): boolean;
    set bigint(value: SerializedTypeLiteralBigInt);
    _adoptRegex(value: $.Orphan<SerializedTypeLiteralRegex>): void;
    _disownRegex(): $.Orphan<SerializedTypeLiteralRegex>;
    get regex(): SerializedTypeLiteralRegex;
    _hasRegex(): boolean;
    _initRegex(): SerializedTypeLiteralRegex;
    get _isRegex(): boolean;
    set regex(value: SerializedTypeLiteralRegex);
    toString(): string;
    which(): SerializedTypeLiteral_Literal_Which;
}
declare class SerializedTypeLiteral extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    get literal(): SerializedTypeLiteral_Literal;
    _initLiteral(): SerializedTypeLiteral_Literal;
    toString(): string;
}
declare class SerializedTypeTemplateLiteral extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _TypeArguments: $.ListCtor<SerializedTypeReference>;
    static _Decorators: $.ListCtor<SerializedTypeReference>;
    static _Types: $.ListCtor<SerializedTypeReference>;
    get typeName(): string;
    set typeName(value: string);
    _adoptTypeArguments(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypeArguments(): $.Orphan<$.List<SerializedTypeReference>>;
    get typeArguments(): $.List<SerializedTypeReference>;
    _hasTypeArguments(): boolean;
    _initTypeArguments(length: number): $.List<SerializedTypeReference>;
    set typeArguments(value: $.List<SerializedTypeReference>);
    _adoptIndexAccessOrigin(value: $.Orphan<IndexAccessOrigin>): void;
    _disownIndexAccessOrigin(): $.Orphan<IndexAccessOrigin>;
    get indexAccessOrigin(): IndexAccessOrigin;
    _hasIndexAccessOrigin(): boolean;
    _initIndexAccessOrigin(): IndexAccessOrigin;
    set indexAccessOrigin(value: IndexAccessOrigin);
    _adoptDecorators(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownDecorators(): $.Orphan<$.List<SerializedTypeReference>>;
    get decorators(): $.List<SerializedTypeReference>;
    _hasDecorators(): boolean;
    _initDecorators(length: number): $.List<SerializedTypeReference>;
    set decorators(value: $.List<SerializedTypeReference>);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    _adoptTypes(value: $.Orphan<$.List<SerializedTypeReference>>): void;
    _disownTypes(): $.Orphan<$.List<SerializedTypeReference>>;
    get types(): $.List<SerializedTypeReference>;
    _hasTypes(): boolean;
    _initTypes(length: number): $.List<SerializedTypeReference>;
    set types(value: $.List<SerializedTypeReference>);
    toString(): string;
}
declare class SerializedTypeOther extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    get typeName(): string;
    set typeName(value: string);
    get kind(): ReflectionKind;
    set kind(value: ReflectionKind);
    toString(): string;
}
declare const SerializedType_Type_Which: {
    readonly SIMPLE: 0;
    readonly LITERAL: 1;
    readonly TEMPLATE_LITERAL: 2;
    readonly PARAMETER: 3;
    readonly FUNCTION: 4;
    readonly METHOD: 5;
    readonly PROPERTY: 6;
    readonly PROMISE: 7;
    readonly CLASS_TYPE: 8;
    readonly ENUM: 9;
    readonly UNION: 10;
    readonly INTERSECTION: 11;
    readonly ARRAY: 12;
    readonly OBJECT_LITERAL: 13;
    readonly INDEX_SIGNATURE: 14;
    readonly PROPERTY_SIGNATURE: 15;
    readonly METHOD_SIGNATURE: 16;
    readonly TYPE_PARAMETER: 17;
    readonly INFER: 18;
    readonly TUPLE: 19;
    readonly TUPLE_MEMBER: 20;
    readonly REST: 21;
    /**
  * For any other type that is not explicitly defined
  *
  */
    readonly OTHER: 22;
};
type SerializedType_Type_Which = (typeof SerializedType_Type_Which)[keyof typeof SerializedType_Type_Which];
declare class SerializedType_Type extends $.Struct {
    static readonly SIMPLE: 0;
    static readonly LITERAL: 1;
    static readonly TEMPLATE_LITERAL: 2;
    static readonly PARAMETER: 3;
    static readonly FUNCTION: 4;
    static readonly METHOD: 5;
    static readonly PROPERTY: 6;
    static readonly PROMISE: 7;
    static readonly CLASS_TYPE: 8;
    static readonly ENUM: 9;
    static readonly UNION: 10;
    static readonly INTERSECTION: 11;
    static readonly ARRAY: 12;
    static readonly OBJECT_LITERAL: 13;
    static readonly INDEX_SIGNATURE: 14;
    static readonly PROPERTY_SIGNATURE: 15;
    static readonly METHOD_SIGNATURE: 16;
    static readonly TYPE_PARAMETER: 17;
    static readonly INFER: 18;
    static readonly TUPLE: 19;
    static readonly TUPLE_MEMBER: 20;
    static readonly REST: 21;
    static readonly OTHER: 22;
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    _adoptSimple(value: $.Orphan<SimpleSerializedType>): void;
    _disownSimple(): $.Orphan<SimpleSerializedType>;
    get simple(): SimpleSerializedType;
    _hasSimple(): boolean;
    _initSimple(): SimpleSerializedType;
    get _isSimple(): boolean;
    set simple(value: SimpleSerializedType);
    _adoptLiteral(value: $.Orphan<SerializedTypeLiteral>): void;
    _disownLiteral(): $.Orphan<SerializedTypeLiteral>;
    get literal(): SerializedTypeLiteral;
    _hasLiteral(): boolean;
    _initLiteral(): SerializedTypeLiteral;
    get _isLiteral(): boolean;
    set literal(value: SerializedTypeLiteral);
    _adoptTemplateLiteral(value: $.Orphan<SerializedTypeTemplateLiteral>): void;
    _disownTemplateLiteral(): $.Orphan<SerializedTypeTemplateLiteral>;
    get templateLiteral(): SerializedTypeTemplateLiteral;
    _hasTemplateLiteral(): boolean;
    _initTemplateLiteral(): SerializedTypeTemplateLiteral;
    get _isTemplateLiteral(): boolean;
    set templateLiteral(value: SerializedTypeTemplateLiteral);
    _adoptParameter(value: $.Orphan<SerializedTypeParameter>): void;
    _disownParameter(): $.Orphan<SerializedTypeParameter>;
    get parameter(): SerializedTypeParameter;
    _hasParameter(): boolean;
    _initParameter(): SerializedTypeParameter;
    get _isParameter(): boolean;
    set parameter(value: SerializedTypeParameter);
    _adoptFunction(value: $.Orphan<SerializedTypeFunction>): void;
    _disownFunction(): $.Orphan<SerializedTypeFunction>;
    get function(): SerializedTypeFunction;
    _hasFunction(): boolean;
    _initFunction(): SerializedTypeFunction;
    get _isFunction(): boolean;
    set function(value: SerializedTypeFunction);
    _adoptMethod(value: $.Orphan<SerializedTypeMethod>): void;
    _disownMethod(): $.Orphan<SerializedTypeMethod>;
    get method(): SerializedTypeMethod;
    _hasMethod(): boolean;
    _initMethod(): SerializedTypeMethod;
    get _isMethod(): boolean;
    set method(value: SerializedTypeMethod);
    _adoptProperty(value: $.Orphan<SerializedTypeProperty>): void;
    _disownProperty(): $.Orphan<SerializedTypeProperty>;
    get property(): SerializedTypeProperty;
    _hasProperty(): boolean;
    _initProperty(): SerializedTypeProperty;
    get _isProperty(): boolean;
    set property(value: SerializedTypeProperty);
    _adoptPromise(value: $.Orphan<SerializedTypePromise>): void;
    _disownPromise(): $.Orphan<SerializedTypePromise>;
    get promise(): SerializedTypePromise;
    _hasPromise(): boolean;
    _initPromise(): SerializedTypePromise;
    get _isPromise(): boolean;
    set promise(value: SerializedTypePromise);
    _adoptClassType(value: $.Orphan<SerializedTypeClassType>): void;
    _disownClassType(): $.Orphan<SerializedTypeClassType>;
    get classType(): SerializedTypeClassType;
    _hasClassType(): boolean;
    _initClassType(): SerializedTypeClassType;
    get _isClassType(): boolean;
    set classType(value: SerializedTypeClassType);
    _adoptEnum(value: $.Orphan<SerializedTypeEnum>): void;
    _disownEnum(): $.Orphan<SerializedTypeEnum>;
    get enum(): SerializedTypeEnum;
    _hasEnum(): boolean;
    _initEnum(): SerializedTypeEnum;
    get _isEnum(): boolean;
    set enum(value: SerializedTypeEnum);
    _adoptUnion(value: $.Orphan<SerializedTypeUnion>): void;
    _disownUnion(): $.Orphan<SerializedTypeUnion>;
    get union(): SerializedTypeUnion;
    _hasUnion(): boolean;
    _initUnion(): SerializedTypeUnion;
    get _isUnion(): boolean;
    set union(value: SerializedTypeUnion);
    _adoptIntersection(value: $.Orphan<SerializedTypeIntersection>): void;
    _disownIntersection(): $.Orphan<SerializedTypeIntersection>;
    get intersection(): SerializedTypeIntersection;
    _hasIntersection(): boolean;
    _initIntersection(): SerializedTypeIntersection;
    get _isIntersection(): boolean;
    set intersection(value: SerializedTypeIntersection);
    _adoptArray(value: $.Orphan<SerializedTypeArray>): void;
    _disownArray(): $.Orphan<SerializedTypeArray>;
    get array(): SerializedTypeArray;
    _hasArray(): boolean;
    _initArray(): SerializedTypeArray;
    get _isArray(): boolean;
    set array(value: SerializedTypeArray);
    _adoptObjectLiteral(value: $.Orphan<SerializedTypeObjectLiteral>): void;
    _disownObjectLiteral(): $.Orphan<SerializedTypeObjectLiteral>;
    get objectLiteral(): SerializedTypeObjectLiteral;
    _hasObjectLiteral(): boolean;
    _initObjectLiteral(): SerializedTypeObjectLiteral;
    get _isObjectLiteral(): boolean;
    set objectLiteral(value: SerializedTypeObjectLiteral);
    _adoptIndexSignature(value: $.Orphan<SerializedTypeIndexSignature>): void;
    _disownIndexSignature(): $.Orphan<SerializedTypeIndexSignature>;
    get indexSignature(): SerializedTypeIndexSignature;
    _hasIndexSignature(): boolean;
    _initIndexSignature(): SerializedTypeIndexSignature;
    get _isIndexSignature(): boolean;
    set indexSignature(value: SerializedTypeIndexSignature);
    _adoptPropertySignature(value: $.Orphan<SerializedTypePropertySignature>): void;
    _disownPropertySignature(): $.Orphan<SerializedTypePropertySignature>;
    get propertySignature(): SerializedTypePropertySignature;
    _hasPropertySignature(): boolean;
    _initPropertySignature(): SerializedTypePropertySignature;
    get _isPropertySignature(): boolean;
    set propertySignature(value: SerializedTypePropertySignature);
    _adoptMethodSignature(value: $.Orphan<SerializedTypeMethodSignature>): void;
    _disownMethodSignature(): $.Orphan<SerializedTypeMethodSignature>;
    get methodSignature(): SerializedTypeMethodSignature;
    _hasMethodSignature(): boolean;
    _initMethodSignature(): SerializedTypeMethodSignature;
    get _isMethodSignature(): boolean;
    set methodSignature(value: SerializedTypeMethodSignature);
    _adoptTypeParameter(value: $.Orphan<SerializedTypeTypeParameter>): void;
    _disownTypeParameter(): $.Orphan<SerializedTypeTypeParameter>;
    get typeParameter(): SerializedTypeTypeParameter;
    _hasTypeParameter(): boolean;
    _initTypeParameter(): SerializedTypeTypeParameter;
    get _isTypeParameter(): boolean;
    set typeParameter(value: SerializedTypeTypeParameter);
    _adoptInfer(value: $.Orphan<SerializedTypeInfer>): void;
    _disownInfer(): $.Orphan<SerializedTypeInfer>;
    get infer(): SerializedTypeInfer;
    _hasInfer(): boolean;
    _initInfer(): SerializedTypeInfer;
    get _isInfer(): boolean;
    set infer(value: SerializedTypeInfer);
    _adoptTuple(value: $.Orphan<SerializedTypeTuple>): void;
    _disownTuple(): $.Orphan<SerializedTypeTuple>;
    get tuple(): SerializedTypeTuple;
    _hasTuple(): boolean;
    _initTuple(): SerializedTypeTuple;
    get _isTuple(): boolean;
    set tuple(value: SerializedTypeTuple);
    _adoptTupleMember(value: $.Orphan<SerializedTypeTupleMember>): void;
    _disownTupleMember(): $.Orphan<SerializedTypeTupleMember>;
    get tupleMember(): SerializedTypeTupleMember;
    _hasTupleMember(): boolean;
    _initTupleMember(): SerializedTypeTupleMember;
    get _isTupleMember(): boolean;
    set tupleMember(value: SerializedTypeTupleMember);
    _adoptRest(value: $.Orphan<SerializedTypeRest>): void;
    _disownRest(): $.Orphan<SerializedTypeRest>;
    get rest(): SerializedTypeRest;
    _hasRest(): boolean;
    _initRest(): SerializedTypeRest;
    get _isRest(): boolean;
    set rest(value: SerializedTypeRest);
    _adoptOther(value: $.Orphan<SerializedTypeOther>): void;
    _disownOther(): $.Orphan<SerializedTypeOther>;
    /**
  * For any other type that is not explicitly defined
  *
  */
    get other(): SerializedTypeOther;
    _hasOther(): boolean;
    _initOther(): SerializedTypeOther;
    get _isOther(): boolean;
    set other(value: SerializedTypeOther);
    toString(): string;
    which(): SerializedType_Type_Which;
}
declare class SerializedType extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    get type(): SerializedType_Type;
    _initType(): SerializedType_Type;
    toString(): string;
}
declare class SerializedTypes extends $.Struct {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: $.ObjectSize;
    };
    static _Types: $.ListCtor<SerializedType>;
    _adoptTypes(value: $.Orphan<$.List<SerializedType>>): void;
    _disownTypes(): $.Orphan<$.List<SerializedType>>;
    get types(): $.List<SerializedType>;
    _hasTypes(): boolean;
    _initTypes(length: number): $.List<SerializedType>;
    set types(value: $.List<SerializedType>);
    toString(): string;
}
declare type __ΩReflectionKind = any[];
declare type __ΩReflectionVisibility = any[];
declare type __ΩDefaultValueReflection_Value_Which = any[];
declare type __ΩSerializedTypeLiteral_Literal_Which = any[];
declare type __ΩSerializedType_Type_Which = any[];

export { DefaultValueReflection, DefaultValueReflection_Value, DefaultValueReflection_Value_Which, EntityOptions, EntityOptions_EntityIndexOptions, IndexAccessOrigin, ReflectionKind, ReflectionVisibility, SerializedType, SerializedTypeArray, SerializedTypeClassType, SerializedTypeEnum, SerializedTypeEnumEntry, SerializedTypeFunction, SerializedTypeIndexSignature, SerializedTypeInfer, SerializedTypeIntersection, SerializedTypeLiteral, SerializedTypeLiteralBigInt, SerializedTypeLiteralRegex, SerializedTypeLiteralSymbol, SerializedTypeLiteral_Literal, SerializedTypeLiteral_Literal_Which, SerializedTypeMethod, SerializedTypeMethodSignature, SerializedTypeObjectLiteral, SerializedTypeOther, SerializedTypeParameter, SerializedTypePromise, SerializedTypeProperty, SerializedTypePropertySignature, SerializedTypeReference, SerializedTypeRest, SerializedTypeTemplateLiteral, SerializedTypeTuple, SerializedTypeTupleMember, SerializedTypeTypeParameter, SerializedTypeUnion, SerializedType_Type, SerializedType_Type_Which, SerializedTypes, SimpleSerializedType, TagsReflection, type __ΩDefaultValueReflection_Value_Which, type __ΩReflectionKind, type __ΩReflectionVisibility, type __ΩSerializedTypeLiteral_Literal_Which, type __ΩSerializedType_Type_Which, _capnpFileId };
